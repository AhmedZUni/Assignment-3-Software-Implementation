#ICS220 - Assignment 3: Software Implementation - OO Project with GUI and Data storage
import tkinter as tk
from tkinter import messagebox
import pickle

# Define classes
class Employee:
    def __init__(self, name, employee_id, department, job_title, basic_salary, manager_id, date_of_birth=None, passport_details=None):
        self.name = name
        self.employee_id = employee_id
        self.department = department
        self.job_title = job_title
        self.basic_salary = basic_salary
        self.manager_id = manager_id
        self.date_of_birth = date_of_birth
        self.passport_details = passport_details

class Event:
    def __init__(self, event_id, event_type, theme, date, time):
        self.event_id = event_id
        self.event_type = event_type
        self.theme = theme
        self.date = date
        self.time = time



class Client:
    def __init__(self, client_id, name, address, contact_details):
        self.client_id = client_id
        self.name = name
        self.address = address
        self.contact_details = contact_details

class Supplier:
    def __init__(self, supplier_id, name, address, contact_details):
        self.supplier_id = supplier_id
        self.name = name
        self.address = address
        self.contact_details = contact_details
# GUI class
class ManagementSystemGUI:
    def __init__(self, root):
        self.root = root
        self.load_data()
        self.root.title(' Management System')
        self.employees = []  # Initialize employees as an empty list
        self.events = []  # Initialize events as an empty list
        self.clients = []  # Initialize clients as an empty list
        self.suppliers = []  # Initialize suppliers as an empty list

        # Create labels and buttons for each category
        categories = [
            ("Employee Management", [
                ("Add Employee", self.add_employee),
                ("Delete Employee", self.delete_employee),
                ("Modify Employee", self.modify_employee),
                ("Display Employee", self.display_employee)
            ]),
            ("Event Management", [
                ("Add Event", self.add_event),
                ("Delete Event", self.delete_event),
                ("Modify Event", self.modify_event),
                ("Display Event", self.display_event)
            ]),
            ("Client Management", [
                ("Add Client", self.add_client),
                ("Delete Client", self.delete_client),
                ("Modify Client", self.modify_client),
                ("Display Client", self.display_client)
            ]),
            ("Supplier Management", [
                ("Add Supplier", self.add_supplier),
                ("Delete Supplier", self.delete_supplier),
                ("Modify Supplier", self.modify_supplier),
                ("Display Supplier", self.display_supplier)
            ])
        ]

        # Calculate number of rows needed
        max_options = max(len(options) for _, options in categories)
        num_cols = len(categories)

        # Create labels and buttons for each category
        for col, (category, options) in enumerate(categories):
            tk.Label(root, text=category).grid(row=0, column=col, padx=10, pady=5)
            for row, (text, command) in enumerate(options, start=1):
                button = tk.Button(root, text=text, command=command)
                button.grid(row=row, column=col, padx=10, pady=5, sticky="ew")

        # Adjust column weights to make them expandable
        for col in range(num_cols):
            root.grid_columnconfigure(col, weight=1)
    def submit_employee(self):
        name = self.name_entry.get()
        employee_id = self.employee_id_entry.get()
        department = self.department_entry.get()
        job_title = self.job_title_entry.get()
        basic_salary = float(self.basic_salary_entry.get())
        manager_id = self.manager_id_entry.get()

        # Create an Employee object
        employee = Employee(name, employee_id, department, job_title, basic_salary, manager_id)

        # Append the employee to the list
        self.employees.append(employee)

    def display_employee_details(self):
        try:
            employee_id = self.display_employee_id_entry.get()
            # Search for the employee with the given ID
            for employee in self.employees:
                if employee.employee_id == employee_id:
                    # Display the details of the employee
                    messagebox.showinfo("Employee Details", f"Name: {employee.name}\nID: {employee.employee_id}\nDepartment: {employee.department}\nJob Title: {employee.job_title}\nBasic Salary: {employee.basic_salary}\nManager ID: {employee.manager_id}")
                    return
            # If employee with the given ID is not found
            messagebox.showerror("Error", f"Employee with ID {employee_id} not found.")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def create_employee_management_gui(self):

        # Display Employee Frame
        self.display_employee_frame = tk.Frame(self.root)
        self.display_employee_frame.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

        self.display_employee_id_label = tk.Label(self.display_employee_frame, text="Enter Employee ID:")
        self.display_employee_id_label.grid(row=0, column=0, padx=10, pady=10)
        self.display_employee_id_entry = tk.Entry(self.display_employee_frame)
        self.display_employee_id_entry.grid(row=0, column=1, padx=10, pady=10)

        self.display_employee_button = tk.Button(self.display_employee_frame, text="Display Employee",
                                                 command=self.display_employee_details)
        self.display_employee_button.grid(row=0, column=2, padx=10, pady=10)
    def load_data(self):
        # Load existing data from files or create empty lists
        self.employees = self.load_data_from_file("employees.bin")
        self.events = self.load_data_from_file("events.bin")
        self.clients = self.load_data_from_file("clients.bin")
        self.suppliers = self.load_data_from_file("suppliers.bin")

    def load_data_from_file(self, filename):
        try:
            with open(filename, "rb") as file:
                data = pickle.load(file)
                return data
        except FileNotFoundError:
            return []

    def save_data_to_file(self, data, filename):
        with open(filename, "wb") as file:
            pickle.dump(data, file)

    # Employee functions
    def add_employee(self):
        # Create a new window for adding employee
        self.add_employee_window = tk.Toplevel(self.root)
        self.add_employee_window.title("Add Employee")

        # Labels and Entry fields for employee details
        tk.Label(self.add_employee_window, text="Name:").grid(row=0, column=0, padx=10, pady=5)
        self.name_entry = tk.Entry(self.add_employee_window)
        self.name_entry.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(self.add_employee_window, text="ID Number:").grid(row=1, column=0, padx=10, pady=5)
        self.id_entry = tk.Entry(self.add_employee_window)
        self.id_entry.grid(row=1, column=1, padx=10, pady=5)

        tk.Label(self.add_employee_window, text="Department:").grid(row=2, column=0, padx=10, pady=5)
        self.department_entry = tk.Entry(self.add_employee_window)
        self.department_entry.grid(row=2, column=1, padx=10, pady=5)

        tk.Label(self.add_employee_window, text="Job Title:").grid(row=3, column=0, padx=10, pady=5)
        self.job_title_entry = tk.Entry(self.add_employee_window)
        self.job_title_entry.grid(row=3, column=1, padx=10, pady=5)

        tk.Label(self.add_employee_window, text="Basic Salary:").grid(row=4, column=0, padx=10, pady=5)
        self.basic_salary_entry = tk.Entry(self.add_employee_window)
        self.basic_salary_entry.grid(row=4, column=1, padx=10, pady=5)

        tk.Label(self.add_employee_window, text="Manager ID:").grid(row=5, column=0, padx=10, pady=5)
        self.manager_id_entry = tk.Entry(self.add_employee_window)
        self.manager_id_entry.grid(row=5, column=1, padx=10, pady=5)

        # Submit button to add employee
        tk.Button(self.add_employee_window, text="Submit", command=self.submit_employee).grid(row=6, column=0,
                                                                                              columnspan=2, padx=10,
                                                                                              pady=10)

    def submit_employee(self):
        # Retrieve employee details from entry fields
        name = self.name_entry.get()
        employee_id = self.id_entry.get()
        department = self.department_entry.get()
        job_title = self.job_title_entry.get()
        basic_salary = float(self.basic_salary_entry.get())
        manager_id = self.manager_id_entry.get()

        # Create Employee object and append to employees list
        employee = Employee(name, employee_id, department, job_title, basic_salary, manager_id)
        self.employees.append(employee)

        # Save updated employee data to file
        self.save_data_to_file(self.employees, "employees.bin")

        # Close the add employee window
        self.add_employee_window.destroy()

        # Optionally, display a message box or update GUI to indicate successful addition of employee
        messagebox.showinfo("Success", "Employee added successfully.")
    def delete_employee(self):
        # Create a new window for deleting an employee
        self.delete_employee_window = tk.Toplevel(self.root)
        self.delete_employee_window.title("Delete Employee")

        # Label and Entry field for entering employee ID
        tk.Label(self.delete_employee_window, text="Enter Employee ID:").grid(row=0, column=0, padx=10, pady=5)
        self.delete_employee_id_entry = tk.Entry(self.delete_employee_window)
        self.delete_employee_id_entry.grid(row=0, column=1, padx=10, pady=5)

        # Button to trigger deleting the employee
        tk.Button(self.delete_employee_window, text="Delete", command=self.delete_employee_confirm).grid(row=1, column=0, columnspan=2, padx=10, pady=10)

    def delete_employee_confirm(self):
        try:
            employee_id = self.delete_employee_id_entry.get()
            # Search for the employee with the given ID
            for employee in self.employees:
                if employee.employee_id == employee_id:
                    # Confirm deletion with a message box
                    confirm = messagebox.askyesno("Confirm Deletion", f"Do you want to delete employee {employee.name}?")
                    if confirm:
                        # Delete the employee
                        self.employees.remove(employee)
                        # Save updated employee data to file
                        self.save_data_to_file(self.employees, "employees.bin")
                        messagebox.showinfo("Success", "Employee deleted successfully.")
                    return
            # If employee with the given ID is not found
            messagebox.showerror("Error", f"Employee with ID {employee_id} not found.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
        pass

    def modify_employee(self):
        # Create a new window for modifying an employee
        self.modify_employee_window = tk.Toplevel(self.root)
        self.modify_employee_window.title("Modify Employee")

        # Label and Entry field for entering employee ID
        tk.Label(self.modify_employee_window, text="Enter Employee ID:").grid(row=0, column=0, padx=10, pady=5)
        self.modify_employee_id_entry = tk.Entry(self.modify_employee_window)
        self.modify_employee_id_entry.grid(row=0, column=1, padx=10, pady=5)

        # Button to trigger modifying the employee
        tk.Button(self.modify_employee_window, text="Modify", command=self.modify_employee_details).grid(row=1, column=0, columnspan=2, padx=10, pady=10)

    def modify_employee_details(self):
        try:
            employee_id = self.modify_employee_id_entry.get()
            # Search for the employee with the given ID
            for employee in self.employees:
                if employee.employee_id == employee_id:
                    # Create a new window for entering new employee details
                    self.modify_employee_details_window = tk.Toplevel(self.modify_employee_window)
                    self.modify_employee_details_window.title("Modify Employee Details")

                    # Labels and Entry fields for new employee details
                    tk.Label(self.modify_employee_details_window, text="Name:").grid(row=0, column=0, padx=10, pady=5)
                    self.modify_name_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_name_entry.grid(row=0, column=1, padx=10, pady=5)

                    tk.Label(self.modify_employee_details_window, text="Department:").grid(row=1, column=0, padx=10, pady=5)
                    self.modify_department_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_department_entry.grid(row=1, column=1, padx=10, pady=5)

                    tk.Label(self.modify_employee_details_window, text="Job Title:").grid(row=2, column=0, padx=10, pady=5)
                    self.modify_job_title_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_job_title_entry.grid(row=2, column=1, padx=10, pady=5)

                    tk.Label(self.modify_employee_details_window, text="Basic Salary:").grid(row=3, column=0, padx=10, pady=5)
                    self.modify_basic_salary_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_basic_salary_entry.grid(row=3, column=1, padx=10, pady=5)

                    tk.Label(self.modify_employee_details_window, text="Manager ID:").grid(row=4, column=0, padx=10, pady=5)
                    self.modify_manager_id_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_manager_id_entry.grid(row=4, column=1, padx=10, pady=5)

                    # Button to trigger modifying the employee details
                    tk.Button(self.modify_employee_details_window, text="Modify", command=lambda: self.update_employee_details(employee)).grid(row=5, column=0, columnspan=2, padx=10, pady=10)
                    return
            # If employee with the given ID is not found
            messagebox.showerror("Error", f"Employee with ID {employee_id} not found.")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def update_employee_details(self, employee):
        # Retrieve new employee details from entry fields
        employee.name = self.modify_name_entry.get()
        employee.department = self.modify_department_entry.get()
        employee.job_title = self.modify_job_title_entry.get()
        employee.basic_salary = float(self.modify_basic_salary_entry.get())
        employee.manager_id = self.modify_manager_id_entry.get()

        # Save updated employee data to file
        self.save_data_to_file(self.employees, "employees.bin")

        # Close the modify employee details window
        self.modify_employee_details_window.destroy()

        # Optionally, display a message box or update GUI to indicate successful modification of employee details
        messagebox.showinfo("Success", "Employee details modified successfully.")
        pass

    def display_employee(self):
        # Create a new window for displaying employee details
        self.display_employee_window = tk.Toplevel(self.root)
        self.display_employee_window.title("Display Employee")

        # Label and Entry field for entering employee ID
        tk.Label(self.display_employee_window, text="Enter Employee ID:").grid(row=0, column=0, padx=10, pady=5)
        self.display_employee_id_entry = tk.Entry(self.display_employee_window)
        self.display_employee_id_entry.grid(row=0, column=1, padx=10, pady=5)

        # Button to trigger displaying employee details
        tk.Button(self.display_employee_window, text="Display", command=self.display_employee_details).grid(row=1, column=0, columnspan=2, padx=10, pady=10)

    def display_employee_details(self):
        try:
            employee_id = self.display_employee_id_entry.get()
            # Search for the employee with the given ID
            for employee in self.employees:
                if employee.employee_id == employee_id:
                    # Display the details of the employee
                    messagebox.showinfo("Employee Details", f"Name: {employee.name}\nID: {employee.employee_id}\nDepartment: {employee.department}\nJob Title: {employee.job_title}\nBasic Salary: {employee.basic_salary}\nManager ID: {employee.manager_id}")
                    return
            # If employee with the given ID is not found
            messagebox.showerror("Error", f"Employee with ID {employee_id} not found.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
        pass
    def modify_employee(self):
        # Create a new window for modifying an employee
        self.modify_employee_window = tk.Toplevel(self.root)
        self.modify_employee_window.title("Modify Employee")

        # Label and Entry field for entering employee ID
        tk.Label(self.modify_employee_window, text="Enter Employee ID:").grid(row=0, column=0, padx=10, pady=5)
        self.modify_employee_id_entry = tk.Entry(self.modify_employee_window)
        self.modify_employee_id_entry.grid(row=0, column=1, padx=10, pady=5)

        # Button to trigger modifying the employee
        tk.Button(self.modify_employee_window, text="Modify", command=self.modify_employee_details).grid(row=1, column=0, columnspan=2, padx=10, pady=10)

    def modify_employee_details(self):
        try:
            employee_id = self.modify_employee_id_entry.get()
            # Search for the employee with the given ID
            for employee in self.employees:
                if employee.employee_id == employee_id:
                    # Create a new window for entering new employee details
                    self.modify_employee_details_window = tk.Toplevel(self.modify_employee_window)
                    self.modify_employee_details_window.title("Modify Employee Details")

                    # Labels and Entry fields for new employee details
                    tk.Label(self.modify_employee_details_window, text="Name:").grid(row=0, column=0, padx=10, pady=5)
                    self.modify_name_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_name_entry.grid(row=0, column=1, padx=10, pady=5)

                    tk.Label(self.modify_employee_details_window, text="Department:").grid(row=1, column=0, padx=10, pady=5)
                    self.modify_department_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_department_entry.grid(row=1, column=1, padx=10, pady=5)

                    tk.Label(self.modify_employee_details_window, text="Job Title:").grid(row=2, column=0, padx=10, pady=5)
                    self.modify_job_title_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_job_title_entry.grid(row=2, column=1, padx=10, pady=5)

                    tk.Label(self.modify_employee_details_window, text="Basic Salary:").grid(row=3, column=0, padx=10, pady=5)
                    self.modify_basic_salary_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_basic_salary_entry.grid(row=3, column=1, padx=10, pady=5)

                    tk.Label(self.modify_employee_details_window, text="Manager ID:").grid(row=4, column=0, padx=10, pady=5)
                    self.modify_manager_id_entry = tk.Entry(self.modify_employee_details_window)
                    self.modify_manager_id_entry.grid(row=4, column=1, padx=10, pady=5)

                    # Button to trigger modifying the employee details
                    tk.Button(self.modify_employee_details_window, text="Modify", command=lambda: self.update_employee_details(employee)).grid(row=5, column=0, columnspan=2, padx=10, pady=10)
                    return
            # If employee with the given ID is not found
            messagebox.showerror("Error", f"Employee with ID {employee_id} not found.")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def update_employee_details(self, employee):
        # Retrieve new employee details from entry fields
        employee.name = self.modify_name_entry.get()
        employee.department = self.modify_department_entry.get()
        employee.job_title = self.modify_job_title_entry.get()
        employee.basic_salary = float(self.modify_basic_salary_entry.get())
        employee.manager_id = self.modify_manager_id_entry.get()

        # Save updated employee data to file
        self.save_data_to_file(self.employees, "employees.bin")

        # Close the modify employee details window
        self.modify_employee_details_window.destroy()

        # Optionally, display a message box or update GUI to indicate successful modification of employee details
        messagebox.showinfo("Success", "Employee details modified successfully.")
        pass

    def display_employee(self):
        # Create a new window for displaying employee details
        self.display_employee_window = tk.Toplevel(self.root)
        self.display_employee_window.title("Display Employee")

        # Label and Entry field for entering employee ID
        tk.Label(self.display_employee_window, text="Enter Employee ID:").grid(row=0, column=0, padx=10, pady=5)
        self.display_employee_id_entry = tk.Entry(self.display_employee_window)
        self.display_employee_id_entry.grid(row=0, column=1, padx=10, pady=5)

        # Button to trigger displaying employee details
        tk.Button(self.display_employee_window, text="Display", command=self.display_employee_details).grid(row=1, column=0, columnspan=2, padx=10, pady=10)

    def display_employee_details(self):
        try:
            employee_id = self.display_employee_id_entry.get()
            # Search for the employee with the given ID
            for employee in self.employees:
                if employee.employee_id == employee_id:
                    # Display the details of the employee
                    messagebox.showinfo("Employee Details", f"Name: {employee.name}\nID: {employee.employee_id}\nDepartment: {employee.department}\nJob Title: {employee.job_title}\nBasic Salary: {employee.basic_salary}\nManager ID: {employee.manager_id}")
                    return
            # If employee with the given ID is not found
            messagebox.showerror("Error", f"Employee with ID {employee_id} not found.")
        except Exception as e:
            messagebox.showerror("Error", str(e))
        pass

    # Event functions
    def add_event(self):
        # Create a new window for adding an event
        self.add_event_window = tk.Toplevel(self.root)
        self.add_event_window.title("Add Event")

        # Labels and Entry fields for event details
        tk.Label(self.add_event_window, text="Event ID:").grid(row=0, column=0, padx=10, pady=5)
        self.event_id_entry = tk.Entry(self.add_event_window)
        self.event_id_entry.grid(row=0, column=1, padx=10, pady=5)

        tk.Label(self.add_event_window, text="Event Type:").grid(row=1, column=0, padx=10, pady=5)
        self.event_type_entry = tk.Entry(self.add_event_window)
        self.event_type_entry.grid(row=1, column=1, padx=10, pady=5)

        tk.Label(self.add_event_window, text="Event Theme:").grid(row=2, column=0, padx=10, pady=5)
        self.event_theme_entry = tk.Entry(self.add_event_window)
        self.event_theme_entry.grid(row=2, column=1, padx=10, pady=5)

        tk.Label(self.add_event_window, text="Event Date:").grid(row=3, column=0, padx=10, pady=5)
        self.event_date_entry = tk.Entry(self.add_event_window)
        self.event_date_entry.grid(row=3, column=1, padx=10, pady=5)

        tk.Label(self.add_event_window, text="Event Time:").grid(row=4, column=0, padx=10, pady=5)
        self.event_time_entry = tk.Entry(self.add_event_window)
        self.event_time_entry.grid(row=4, column=1, padx=10, pady=5)

        # Submit button to add event
        tk.Button(self.add_event_window, text="Submit", command=self.submit_event).grid(row=5, column=0, columnspan=2, padx=10, pady=10)

    def submit_event(self):
        # Retrieve event details from entry fields
        event_id = self.event_id_entry.get()
        event_type = self.event_type_entry.get()
        event_theme = self.event_theme_entry.get()
        event_date = self.event_date_entry.get()
        event_time = self.event_time_entry.get()

        # Create Event object and append to events list
        event = Event(event_id, event_type, event_theme, event_date, event_time)
        self.events.append(event)

        # Save updated event data to file
        self.save_data_to_file(self.events, "events.bin")

        # Close the add event window
        self.add_event_window.destroy()

        # Optionally, display a message box or update GUI to indicate successful addition of event
        messagebox.showinfo("Success", "Event added successfully.")
        pass

    def display_event(self):
        # Create a new window for displaying event details
        self.display_event_window = tk.Toplevel(self.root)
        self.display_event_window.title("Display Event")

        # Label and Entry field for entering event ID
        tk.Label(self.display_event_window, text="Enter Event ID:").grid(row=0, column=0, padx=10, pady=5)
        self.display_event_id_entry = tk.Entry(self.display_event_window)
        self.display_event_id_entry.grid(row=0, column=1, padx=10, pady=5)

        # Button to trigger displaying event details
        tk.Button(self.display_event_window, text="Display", command=self.display_event_details).grid(row=1, column=0,
                                                                                                      columnspan=2,
                                                                                                      padx=10, pady=10)
