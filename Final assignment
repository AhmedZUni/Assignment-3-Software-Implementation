#ICS220 - Assignment 3: Software Implementation - OO Project with GUI and Data storage
import tkinter as tk
from tkinter import messagebox
import pickle

# Define classes
class Employee:
    def __init__(self, name, employee_id, department, job_title, basic_salary, manager_id, date_of_birth=None, passport_details=None):
        self.name = name
        self.employee_id = employee_id
        self.department = department
        self.job_title = job_title
        self.basic_salary = basic_salary
        self.manager_id = manager_id
        self.date_of_birth = date_of_birth
        self.passport_details = passport_details

class Event:
    def __init__(self, event_id, event_type, theme, date, time):
        self.event_id = event_id
        self.event_type = event_type
        self.theme = theme
        self.date = date
        self.time = time



class Client:
    def __init__(self, client_id, name, address, contact_details):
        self.client_id = client_id
        self.name = name
        self.address = address
        self.contact_details = contact_details

class Supplier:
    def __init__(self, supplier_id, name, address, contact_details):
        self.supplier_id = supplier_id
        self.name = name
        self.address = address
        self.contact_details = contact_details
# GUI class
class ManagementSystemGUI:
    def __init__(self, root):
        self.root = root
        self.load_data()
        self.root.title(' Management System')
        self.employees = []  # Initialize employees as an empty list
        self.events = []  # Initialize events as an empty list
        self.clients = []  # Initialize clients as an empty list
        self.suppliers = []  # Initialize suppliers as an empty list

        # Create labels and buttons for each category
        categories = [
            ("Employee Management", [
                ("Add Employee", self.add_employee),
                ("Delete Employee", self.delete_employee),
                ("Modify Employee", self.modify_employee),
                ("Display Employee", self.display_employee)
            ]),
            ("Event Management", [
                ("Add Event", self.add_event),
                ("Delete Event", self.delete_event),
                ("Modify Event", self.modify_event),
                ("Display Event", self.display_event)
            ]),
            ("Client Management", [
                ("Add Client", self.add_client),
                ("Delete Client", self.delete_client),
                ("Modify Client", self.modify_client),
                ("Display Client", self.display_client)
            ]),
            ("Supplier Management", [
                ("Add Supplier", self.add_supplier),
                ("Delete Supplier", self.delete_supplier),
                ("Modify Supplier", self.modify_supplier),
                ("Display Supplier", self.display_supplier)
            ])
        ]

        # Calculate number of rows needed
        max_options = max(len(options) for _, options in categories)
        num_cols = len(categories)

        # Create labels and buttons for each category
        for col, (category, options) in enumerate(categories):
            tk.Label(root, text=category).grid(row=0, column=col, padx=10, pady=5)
            for row, (text, command) in enumerate(options, start=1):
                button = tk.Button(root, text=text, command=command)
                button.grid(row=row, column=col, padx=10, pady=5, sticky="ew")

        # Adjust column weights to make them expandable
        for col in range(num_cols):
            root.grid_columnconfigure(col, weight=1)
